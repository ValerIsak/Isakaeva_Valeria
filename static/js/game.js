const { createApp } = Vue;

createApp({
  data() {
    return {
      task: {},                 // –¢–µ–∫—É—â–∞—è –∑–∞–¥–∞—á–∞
      questions: [],            // –í–æ–ø—Ä–æ—Å—ã –≤–Ω—É—Ç—Ä–∏ –∑–∞–¥–∞—á–∏
      currentQuestionIndex: 0,  // –ò–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
      answerInput: '',          // –û—Ç–≤–µ—Ç, –µ—Å–ª–∏ –≤–≤–æ–¥–∏—Ç—Å—è –≤—Ä—É—á–Ω—É—é
      lives: 0,                 // –ö–æ–ª-–≤–æ –∂–∏–∑–Ω–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      rank: 0,                  // –û—á–∫–∏ —Ä–∞–Ω–≥–∞
      hint: '',                 // –¢–µ–∫—Å—Ç –ø–æ–¥—Å–∫–∞–∑–∫–∏
      hintCost: 0,              // –°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏
      hintUsed: false,          // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –ª–∏ –ø–æ–¥—Å–∫–∞–∑–∫–∞
      showHintPopup: false,     // –§–ª–∞–≥ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ø–∞–ø–∞ —Å –ø–æ–¥—Å–∫–∞–∑–∫–æ–π
      noTasksLeft: false,       // –§–ª–∞–≥ ‚Äî –µ—Å—Ç—å –ª–∏ –∑–∞–¥–∞—á–∏
      flipped: false,           // –ü–µ—Ä–µ–≤—ë—Ä–Ω—É—Ç–∞ –ª–∏ –∫–∞—Ä—Ç–æ—á–∫–∞
      selectedChoice: null,     // –í—ã–±—Ä–∞–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç (–µ—Å–ª–∏ –∏–∑ —Ç—Ä—ë—Ö)
      monsterImage: '',         // –ö–∞—Ä—Ç–∏–Ω–∫–∞ –º–æ–Ω—Å—Ç—Ä–∞
    };
  },

  computed: {
    currentQuestion() {
      return this.questions[this.currentQuestionIndex] || null; // –¢–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å
    }
  },

  mounted() {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±–æ–π –ª–∏ —Å –±–æ—Å—Å–æ–º
    this.isBossFight = document.getElementById('game-body')?.dataset?.isBoss === 'true';
    const monsterKey = document.getElementById('game-body')?.dataset?.monster;
    if (monsterKey) {
      this.monsterImage = `/static/img/${monsterKey}.jpeg`; // –ü–æ–¥–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–æ–Ω—Å—Ç—Ä–∞
    }

    this.getStatus();   // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç—É—Å –∏–≥—Ä–æ–∫–∞ (–∂–∏–∑–Ω–∏ –∏ –æ—á–∫–∏)
    this.loadTask();    // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
    this.applyBackground(); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ–Ω –ª–æ–∫–∞—Ü–∏–∏

    // –£–±–∏—Ä–∞–µ–º –∑–∞—Ç–µ–º–Ω–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
    setTimeout(() => {
        const fade = document.getElementById('game-fade');
        if (fade) {
          fade.classList.add('done');
          setTimeout(() => fade.remove(), 600);
        }
      }, 10);
  },

  methods: {
    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Ñ–æ—Ä–º—É–ª—É –¥–ª—è MathJax
    renderedMath(str) {
      return `\\[${str}\\]`;
    },

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ–Ω –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –ª–æ–∫–∞—Ü–∏–µ–π
    applyBackground() {
      const bg = document.getElementById('game-body').dataset.bg;
      document.body.style.background = `url('${bg}') center/cover no-repeat fixed`;
    },

    // –ü–µ—Ä–µ–≤–æ—Ä–æ—Ç –∫–∞—Ä—Ç–æ—á–∫–∏
    flipCard(event) {
      const tag = event?.target?.tagName?.toLowerCase();
      if (['button', 'input'].includes(tag)) return; // –ù–µ –ø–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞—Ç—å, –µ—Å–ª–∏ –∫–ª–∏–∫ –ø–æ input –∏–ª–∏ –∫–Ω–æ–ø–∫–µ

      this.flipped = !this.flipped;

      this.$nextTick(() => {
        if (!this.flipped && window.MathJax && MathJax.typesetPromise) {
          MathJax.typesetClear();      // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ñ–æ—Ä–º—É–ª—ã
          MathJax.typesetPromise();    // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É–ª—ã
        }
      });
    },

    // –í—ã–±–æ—Ä –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞
    selectAnswer(option) {
      if (this.selectedChoice === option) {
        this.selectedChoice = null; // –û—Ç–º–µ–Ω–∏—Ç—å –≤—ã–±–æ—Ä
      } else {
        this.selectedChoice = option;
        this.answerInput = ''; // –û—á–∏—â–∞–µ–º —Ä—É—á–Ω–æ–π –≤–≤–æ–¥
      }
    },

    // –ö–Ω–æ–ø–∫–∞ "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å" ‚Äî –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞
    saveAnswer() {
      const trimmed = this.answerInput.trim();
      const result = this.selectedChoice || trimmed;

      if (!result) {
        alert('–í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –∏ –Ω–µ –≤–≤–µ–ª–∏ –æ—Ç–≤–µ—Ç!');
        return;
      }

      this.submitAnswer(result);
    },

    // –û—Ç–∫—Ä—ã—Ç—å –ø–æ–ø–∞–ø —Å –ø–æ–¥—Å–∫–∞–∑–∫–æ–π
    openHintPopup() {
      console.log('üì¶ –ö–ª–∏–∫ –Ω–∞ –ü–æ–¥—Å–∫–∞–∑–∫—É!');
      this.showHintPopup = true;
    },

    // –ó–∞–∫—Ä—ã—Ç—å –ø–æ–ø–∞–ø —Å –ø–æ–¥—Å–∫–∞–∑–∫–æ–π
    closeHintPopup() {
      this.showHintPopup = false;
    },

    // –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–µ –∂–∏–∑–Ω–∏ –∏ –æ—á–∫–∏ —Ä–∞–Ω–≥–∞
    getStatus() {
      fetch('/game/api/status/')
        .then(res => res.json())
        .then(data => {
          this.lives = data.lives;
          this.rank = data.rank_points;
        });
    },

    // –ó–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
    loadTask() {
      fetch('/game/api/task/')
        .then(res => {
          if (res.status === 404) {
            this.noTasksLeft = true; // –ù–µ—Ç –∑–∞–¥–∞—á
            return null;
          }
          return res.json();
        })
        .then(data => {
          if (!data) return;

          // –ó–∞–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
          this.task = data;
          this.questions = data.questions;
          this.currentQuestionIndex = 0;
          this.answerInput = '';
          this.hint = data.hint;
          this.hintCost = data.hint_cost;
          this.hintUsed = false;
          this.flipped = false;
          this.selectedChoice = null;

          this.$nextTick(() => {
            if (window.MathJax && window.MathJax.typesetPromise) {
              MathJax.typesetClear();
              MathJax.typesetPromise();
            }
          });
        })
        .catch(err => {
          console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞—á–∏:', err);
          this.noTasksLeft = true;
          this.task = {};
          return null;
        });
    },

    // –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    submitAnswer(answer) {
      const q = this.currentQuestion;
      fetch('/game/api/answer/', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ question_id: q.id, answer: answer })
      })
        .then(res => res.json())
        .then(data => {
          if (data.victory) {
            window.location.href = '/game/boss-victory/'; // –ü–æ–±–µ–¥–∞ –Ω–∞–¥ –±–æ—Å—Å–æ–º
          } else if (data.boss_defeat) {
            window.location.href = '/game/boss-death/';   // –ü–æ—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç –±–æ—Å—Å–∞
          } else if (data.defeat) {
            window.location.href = '/game/defeat/';       // –ü—Ä–æ–∏–≥—Ä—ã—à –æ–±—ã—á–Ω—ã–π
          } else if (data.correct === false) {
            window.location.href = '/game/choose-location/'; // –ù–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç
          } else if (data.correct === true) {
            // –ï—Å–ª–∏ –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π
            if (this.currentQuestionIndex < this.questions.length - 1) {
              this.currentQuestionIndex++;
              this.answerInput = '';
              this.selectedChoice = null;
            } else {
              // –í—Å–µ –≤–æ–ø—Ä–æ—Å—ã —Ä–µ—à–µ–Ω—ã ‚Äî –æ–±–Ω–æ–≤–ª—è–µ–º –∑–∞–¥–∞—á—É
              this.task = {};
              this.questions = [];
              this.currentQuestionIndex = 0;
              this.answerInput = '';
              this.selectedChoice = null;

              this.getStatus();
              this.loadTask();
            }
          }
        });
    },

    // –ü–æ–∫—É–ø–∫–∞ –ø–æ–¥—Å–∫–∞–∑–∫–∏
    buyHint() {
      fetch('/game/api/hint/', { method: 'POST' })
        .then(res => res.json())
        .then(data => {
          if (data.success) {
            this.hintUsed = true;  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥, —á—Ç–æ –ø–æ–¥—Å–∫–∞–∑–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞
            this.getStatus();      // –û–±–Ω–æ–≤–ª—è–µ–º –æ—á–∫–∏ —Ä–∞–Ω–≥–∞
          } else {
            alert('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ—á–∫–æ–≤ —Ä–∞–Ω–≥–∞');
          }
        });
    },

    // –ü–µ—Ä–µ—Ö–æ–¥ –≤ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ª–æ–∫–∞—Ü–∏–∏
    goToMenu() {
      window.location.href = '/game/choose-location/';
    }
  }
}).mount('#game');
